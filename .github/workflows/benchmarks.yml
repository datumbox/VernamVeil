name: Benchmarks

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  benchmark:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Set benchmark sizes
        id: benchvars
        run: |
          echo "SIZES=1 5 25" >> $GITHUB_ENV

      - name: Install system dependencies and build C modules
        run: |
          sudo apt-get update && sudo apt-get install -y build-essential libssl-dev python3-dev
          pip install .[dev,numpy,cffi]
          cd nphash
          python build.py
          ls -lh _npblake2bffi.* _npsha256ffi.*
          cd ..

      - name: Create benchmark data
        run: |
          mkdir -p benchdata
          for size in $SIZES; do
            head -c ${size}M </dev/urandom >benchdata/input_${size}mb.bin
          done

      - name: Run CLI benchmarks
        run: |
          set -e
          NUM_RUNS=10
          for size in $SIZES; do
            echo "Benchmarking size: ${size}mb"
            total_enc=0
            total_dec=0
            for i in $(seq 1 $NUM_RUNS); do
              cp benchdata/input_${size}mb.bin input.bin
              # Clean up files each time to avoid overwrite errors
              rm -f fx.py seed.bin output.enc output.dec
              start_enc=$(date +%s%N)
              python -m vernamveil.cli encode --infile input.bin --outfile output.enc 2>/dev/null
              end_enc=$(date +%s%N)
              enc_time=$((end_enc - start_enc))
              total_enc=$((total_enc + enc_time))

              start_dec=$(date +%s%N)
              python -m vernamveil.cli decode --infile output.enc --outfile output.dec --fx-file fx.py --seed-file seed.bin 2>/dev/null
              end_dec=$(date +%s%N)
              dec_time=$((end_dec - start_dec))
              total_dec=$((total_dec + dec_time))
            done
            avg_enc=$(awk "BEGIN {printf \"%.3f\", $total_enc / $NUM_RUNS / 1000000000}")
            avg_dec=$(awk "BEGIN {printf \"%.3f\", $total_dec / $NUM_RUNS / 1000000000}")
            avg_total=$(awk "BEGIN {printf \"%.3f\", ($total_enc + $total_dec) / $NUM_RUNS / 1000000000}")
            echo "Average encode time for ${size}mb: ${avg_enc} s"
            echo "Average decode time for ${size}mb: ${avg_dec} s"
            echo "Average total time for ${size}mb: ${avg_total} s"
            echo "---------------------------------------------"
          done
