name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        pip-dependencies:
          - [dev]
          - [dev, numpy]
        include:
          - os: ubuntu-latest
            pip-dependencies: [dev, numpy, cffi]
            build-steps: |
              sudo apt-get update && sudo apt-get install -y build-essential libssl-dev python3-dev g++ libtbb-dev
              cd nphash
              python build.py
              ls -lh _npblake2bffi.* _npblake3ffi.* _npsha256ffi.*

          - os: ubuntu-latest
            pip-dependencies: [dev, numpy, cffi]
            postfix: '_notbb'
            build-steps: |
              sudo apt-get update && sudo apt-get install -y build-essential libssl-dev python3-dev
              cd nphash
              export NPBLAKE3_NO_TBB=1
              python build.py
              ls -lh _npblake2bffi.* _npblake3ffi.* _npsha256ffi.*

          - os: macos-latest
            pip-dependencies: [dev, numpy, cffi]
            build-steps: |
              brew install libomp openssl tbb
              cd nphash
              python build.py
              ls -lh _npblake2bffi.* _npblake3ffi.* _npsha256ffi.*

          - os: macos-latest
            pip-dependencies: [dev, numpy, cffi]
            postfix: '_notbb'
            build-steps: |
              brew install libomp openssl
              cd nphash
              export NPBLAKE3_NO_TBB=1
              python build.py
              ls -lh _npblake2bffi.* _npblake3ffi.* _npsha256ffi.*

          - os: windows-latest
            pip-dependencies: [dev, numpy, cffi]
            build-steps: |
              @echo on
              copy .\vcpkg\installed\x64-windows\bin\tbb*.dll nphash\
              set INCLUDE=%CD%\vcpkg\installed\x64-windows\include;%INCLUDE%
              set LIB=%CD%\vcpkg\installed\x64-windows\lib;%LIB%
              choco install openssl --no-progress -y
              cd nphash
              python build.py
              dir _npblake2bffi.* _npblake3ffi.* _npsha256ffi.*

          - os: windows-latest
            pip-dependencies: [dev, numpy, cffi]
            postfix: '_notbb'
            build-steps: |
              @echo on
              choco install openssl --no-progress -y
              cd nphash
              set NPBLAKE3_NO_TBB=1
              python build.py
              dir _npblake2bffi.* _npblake3ffi.* _npsha256ffi.*

    name: test_${{ matrix.os }}_${{ join(matrix.pip-dependencies, '_') }}${{ matrix.postfix || '' }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ${{ matrix.os == 'ubuntu-latest' && '~/.cache/pip' 
            || matrix.os == 'macos-latest' && '~/Library/Caches/pip'
            || matrix.os == 'windows-latest' && '~\\AppData\\Local\\pip\\Cache'
            || '' }}
          key: ${{ matrix.os }}-pip-${{ join(matrix.pip-dependencies, '_') }}
          restore-keys: |
            ${{ matrix.os }}-pip-${{ join(matrix.pip-dependencies, '_') }}

      - name: Install Python dependencies and library
        run: python -m pip install -e .[${{ join(matrix.pip-dependencies, ',') }}]

      - name: Build/package steps (non-Windows)
        if: matrix.build-steps != '' && matrix.os != 'windows-latest'
        run: ${{ matrix.build-steps }}
        shell: bash

      - name: Cache vcpkg and TBB (Windows only)
        if: matrix.os == 'windows-latest' && join(matrix.pip-dependencies, '_') == 'dev_numpy_cffi' && matrix.postfix != '_notbb'
        uses: actions/cache@v4
        with:
          path: vcpkg
          key: vcpkg_windows-latest_dev_numpy_cffi

      - name: vcpkg + TBB setup (Windows only)
        if: matrix.os == 'windows-latest' && join(matrix.pip-dependencies, '_') == 'dev_numpy_cffi' && matrix.postfix != '_notbb'
        run: |
          if not exist vcpkg (
            git clone https://github.com/microsoft/vcpkg.git
            call .\vcpkg\bootstrap-vcpkg.bat -disableMetrics
            call .\vcpkg\vcpkg.exe install tbb:x64-windows
          )
        shell: cmd

      - name: Build/package steps (Windows)
        if: matrix.build-steps != '' && matrix.os == 'windows-latest'
        run: ${{ matrix.build-steps }}
        shell: cmd

#      - name: Setup tmate session (for interactive SSH debugging)
#        if: matrix.os == 'windows-latest'
#        uses: mxschmitt/action-tmate@v3

      - name: Run tests
        run: python -m unittest discover -s tests/ -v
