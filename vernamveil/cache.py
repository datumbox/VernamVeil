import functools
from collections import defaultdict
from types import ModuleType
from typing import Any, Callable, ClassVar, TypeVar, cast

F = TypeVar("F", bound=Callable[..., Any])


def instance_cache(method: F) -> F:
    """
    Decorator for instance methods to cache results in a per-method cache under `self._cache[method_name]`.

    The cache key _np_lib derived from the method arguments. If arguments are unhashable (e.g., numpy arrays),
    their `.tobytes()` or `repr` is used as a fallback.

    Args:
        method: The instance method to be cached.

    Returns:
        The wrapped method with caching applied.
    """

    @functools.wraps(method)
    def wrapper(self: object, *args: Any) -> Any:
        cache = getattr(self, "_cache")[method.__name__]
        try:
            key = tuple(args)
        except TypeError:
            key = tuple(arg.tobytes() if hasattr(arg, "tobytes") else repr(arg) for arg in args)
        if key not in cache:
            cache[key] = method(self, *args)
        return cache[key]

    return cast(F, wrapper)


class NumpyCacheMixin:
    """
    Mixin providing per-instance cache and cached NumPy array helpers.
    """

    _np_lib: ClassVar[ModuleType | None] = None

    def __init__(self) -> None:
        """
        Initializes the NumpyCacheMixin instance with a cache for storing precomputed values.
        """
        self._cache: dict[str, dict[Any, Any]] = defaultdict(dict)

    @property
    def _np(self) -> ModuleType:
        """
        Lazy loads the numpy library for use in the class.

        Returns:
            The numpy library.
        """
        if NumpyCacheMixin._np_lib is None:
            import numpy as np

            NumpyCacheMixin._np_lib = np
        return NumpyCacheMixin._np_lib

    def clear_cache(self) -> None:
        """
        Clears the internal cache used for storing precomputed values.
        """
        self._cache.clear()

    @instance_cache
    def _np_arange(self, start: int, stop: int, dtype: Any) -> Any:
        """
        Returns a cached numpy array generated by np.arange(start, stop, dtype=dtype).

        Args:
            start: Start of the interval.
            stop: End of the interval.
            dtype: Numpy dtype for the array.

        Returns:
            Cached numpy array of the specified range and dtype.
        """
        return self._np.arange(start, stop, dtype=dtype)

    @instance_cache
    def _np_empty(self, size: int, dtype: Any) -> Any:
        """
        Returns a cached empty numpy array of the given size and dtype.

        Args:
            size: Number of elements in the array.
            dtype: Numpy dtype for the array.

        Returns:
            Cached empty numpy array of the specified size and dtype.
        """
        return self._np.empty(size, dtype=dtype)
